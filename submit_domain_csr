#!/bin/bash

mydir="$(dirname "$0")"
. ${mydir}/lib/sysexits.sh
. ${mydir}/lib/common.sh
. ${mydir}/etc/config.sh

printhelp() {
    echoerr "$0 [OPTIONS] [FQDN [FQDN [...]]]"
    echoerr ""
    echoerr "submit a certificate signing request to letsencrypt"
    echoerr "place the challenges into the ACME_CHALLENGE_DIR"
    echoerr "and after successful challenge, retrieve the certificate."
    echoerr ""
    echoerr "Daniel Roesler's acme-tiny <https://github.com/diafygi/acme-tiny>"
    echoerr "is used as letsencrypt client and for other functions as much as "
    echoerr "possible"
    echoerr ""
    echoerr "OPTIONS:"
    echoerr "  --help display this help and exit"
    echoerr "  --all submit the csr for all domains listed in etc/domains.list"
    echoerr "        FQDNs must not be listed together with this option"
    echoerr ""
}

parse_cmdline() {
    [[ "$#" -eq 0 ]] && {
        printhelp
        exit $EX_USAGE
    }

    while [[ $# > 0 ]]
    do
        key="$1"

        case "$key" in
            --all)
                OPT_ALL=1
                ;;
            --help)
                printhelp
                exit $EX_USAGE
                ;;
            *)
                FQDNS+=("$key")
                ;;
        esac
        shift
    done

    [[ "$OPT_ALL" -eq 1 && "${#FQDNS[@]}" -gt 0 ]] && {
        echoerr "ERROR: options --all and specifying FQDNs are mutually exclusive"
        exit $EX_USAGE
    }

    [[ "$OPT_ALL" -eq 0 && "${#FQDNS[@]}" -lt 1 ]] && {
        echoerr "ERROR: no domainnames given: ${#FQDNS[@]}"
        exit $EX_USAGE
    }

    [[ -d "${ACME_CHALLENGE_DIR}" && -w "${ACME_CHALLENGE_DIR}" ]] || {
        echoerr "ERROR: cannot write into directory: '${ACME_CHALLENGE_DIR}'"
        exit $EX_NOINPUT
    }
}


# process global array FQDNS
process_fqdns() {
    # ignore empty array
    [[ "${#FQDNS}" -gt 0 ]] || {
        return
    }

    fqdn_cn="${FQDNS[0]}"
    filename="$(date +%Y-%m-%d)_letsencrypt_${fqdn_cn}"

    tmpfile="$(mktemp)"
    python "${mydir}/acme-tiny/acme_tiny.py" \
        --account-key "${mydir}/account.key" \
        --csr "${certsdir}/${filename}_csr.pem" \
        --acme-dir "$ACME_CHALLENGE_DIR" \
    | openssl x509 -text \
    > "${tmpfile}"

    if [[ "$?" -eq 0 ]]; then
        mv "${tmpfile}" "${certsdir}/${filename}_crt.pem"
    else
        rm "$tmpfile"
        echoerr "ERROR: could not get signed certificate from letsencrypt"
        exit $EX_UNAVAILABLE
    fi
} # end of procedure "process_fqdns"


OPT_ALL=0
FQDNS=()

parse_cmdline "$@"

if [[ "$OPT_ALL" -eq 1 ]];
then
    [[ -r "${etcdir}/domains.list" ]] || {
        echoerr "ERROR: cannot read ${etcdir}/domains.list"
        exit $EX_NOINPUT
    }

    while read line; do
        # Note: domains.list allows only domainnames without spaces, thus
        # don't use quotes around $line here
        FQDNS=($line)
        process_fqdns
    done <"${etcdir}/domains.list"
else
    # Note: FQDNS already set by process_cmdline
    process_fqdns
fi

exit $EX_OK
